[
  {
    "objectID": "tutorials/proportion_plot.html",
    "href": "tutorials/proportion_plot.html",
    "title": "Proportion Plot",
    "section": "",
    "text": "import dabest_nbdev\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt"
  },
  {
    "objectID": "tutorials/proportion_plot.html#create-dataset-for-demo",
    "href": "tutorials/proportion_plot.html#create-dataset-for-demo",
    "title": "Proportion Plot",
    "section": "Create dataset for demo",
    "text": "Create dataset for demo\n\ndef create_demo_prop_dataset(seed=9999, N=40):\n    import numpy as np\n    import pandas as pd\n\n    np.random.seed(9999)  # Fix the seed so the results are replicable.\n    # Create samples\n    n = 1\n    c1 = np.random.binomial(n, 0.2, size=N)\n    c2 = np.random.binomial(n, 0.2, size=N)\n    c3 = np.random.binomial(n, 0.8, size=N)\n\n    t1 = np.random.binomial(n, 0.5, size=N)\n    t2 = np.random.binomial(n, 0.2, size=N)\n    t3 = np.random.binomial(n, 0.3, size=N)\n    t4 = np.random.binomial(n, 0.4, size=N)\n    t5 = np.random.binomial(n, 0.5, size=N)\n    t6 = np.random.binomial(n, 0.6, size=N)\n\n    # Add a `gender` column for coloring the data.\n    females = np.repeat('Female', N / 2).tolist()\n    males = np.repeat('Male', N / 2).tolist()\n    gender = females + males\n\n    # Add an `id` column for paired data plotting.\n    id_col = pd.Series(range(1, N + 1))\n\n    # Combine samples and gender into a DataFrame.\n    df = pd.DataFrame({'Control 1': c1, 'Test 1': t1,\n                       'Control 2': c2, 'Test 2': t2,\n                       'Control 3': c3, 'Test 3': t3,\n                       'Test 4': t4, 'Test 5': t5, 'Test 6': t6,\n                       'Gender': gender, 'ID': id_col\n                       })\n\n    return df\ndf = create_demo_prop_dataset()\n\nOnly accept binary data consisting of 0 and 1.\n\ndf.head()\n\n\n\n\n\n  \n    \n      \n      Control 1\n      Test 1\n      Control 2\n      Test 2\n      Control 3\n      Test 3\n      Test 4\n      Test 5\n      Test 6\n      Gender\n      ID\n    \n  \n  \n    \n      0\n      1\n      1\n      0\n      0\n      1\n      0\n      0\n      1\n      0\n      Female\n      1\n    \n    \n      1\n      0\n      0\n      0\n      1\n      1\n      1\n      0\n      0\n      0\n      Female\n      2\n    \n    \n      2\n      0\n      0\n      0\n      0\n      1\n      0\n      1\n      1\n      0\n      Female\n      3\n    \n    \n      3\n      0\n      0\n      0\n      0\n      1\n      0\n      0\n      1\n      0\n      Female\n      4\n    \n    \n      4\n      0\n      1\n      0\n      0\n      1\n      0\n      0\n      0\n      1\n      Female\n      5\n    \n  \n\n\n\n\nYou need to specify proportional=True for binary data.\n\ntwo_groups_unpaired = dabest_nbdev.load(df, idx=(\"Control 1\", \"Test 1\"), proportional=True)\ntwo_groups_unpaired.mean_diff\n\nDABEST v0.0.1\n=============\n             \nGood morning!\nThe current time is Wed Jan 25 11:20:15 2023.\n\nDABEST v0.0.1\n=============\n             \nGood morning!\nThe current time is Wed Jan 25 11:20:15 2023.\n\nThe unpaired mean difference between Control 1 and Test 1 is 0.375 [95%CI 0.15, 0.525].\nThe p-value of the two-sided permutation t-test is 0.0, calculated for legacy purposes only. \n\n5000 bootstrap samples were taken; the confidence interval is bias-corrected and accelerated.\nAny p-value reported is the probability of observing theeffect size (or greater),\nassuming the null hypothesis ofzero difference is true.\nFor each p-value, 5000 reshuffles of the control and test labels were performed.\n\nTo get the results of all valid statistical tests, use `.mean_diff.statistical_tests`\n\nTo get the results of all valid statistical tests, use `.mean_diff.statistical_tests`"
  },
  {
    "objectID": "tutorials/proportion_plot.html#effect-sizes",
    "href": "tutorials/proportion_plot.html#effect-sizes",
    "title": "Proportion Plot",
    "section": "Effect sizes",
    "text": "Effect sizes\nOnly two effect sizes are supported for binary data:\n\nthe mean difference (mean_diff)\ncohen’s h(cohens_h)\n\n\ntwo_groups_unpaired.mean_diff.results\n\n\n\n\n\n  \n    \n      \n      control\n      test\n      control_N\n      test_N\n      effect_size\n      difference\n      ci\n      bca_low\n      bca_high\n      bca_interval_idx\n      ...\n      pvalue_permutation\n      permutation_count\n      permutations_var\n      pvalue_welch\n      statistic_welch\n      pvalue_students_t\n      statistic_students_t\n      pvalue_mann_whitney\n      statistic_mann_whitney\n      proportional_difference\n    \n  \n  \n    \n      0\n      Control 1\n      Test 1\n      40\n      40\n      mean difference\n      0.375\n      95\n      0.15\n      0.525\n      (55, 4750)\n      ...\n      0.0\n      5000\n      [0.011266025641025641, 0.011266025641025641, 0...\n      0.000289\n      -3.81474\n      0.000271\n      -3.81474\n      0.000434\n      500.0\n      0.825418\n    \n  \n\n1 rows × 27 columns\n\n\n\n\ntwo_groups_unpaired.cohens_h.results\n\n\n\n\n\n  \n    \n      \n      control\n      test\n      control_N\n      test_N\n      effect_size\n      difference\n      ci\n      bca_low\n      bca_high\n      bca_interval_idx\n      ...\n      pvalue_permutation\n      permutation_count\n      permutations_var\n      pvalue_welch\n      statistic_welch\n      pvalue_students_t\n      statistic_students_t\n      pvalue_mann_whitney\n      statistic_mann_whitney\n      proportional_difference\n    \n  \n  \n    \n      0\n      Control 1\n      Test 1\n      40\n      40\n      Cohen's h\n      0.825418\n      95\n      0.329684\n      1.219937\n      (57, 4763)\n      ...\n      0.0\n      5000\n      [0.011266025641025641, 0.011266025641025641, 0...\n      0.000289\n      -3.81474\n      0.000271\n      -3.81474\n      0.000434\n      500.0\n      0.825418\n    \n  \n\n1 rows × 27 columns"
  },
  {
    "objectID": "tutorials/proportion_plot.html#producing-estimation-plots",
    "href": "tutorials/proportion_plot.html#producing-estimation-plots",
    "title": "Proportion Plot",
    "section": "Producing estimation plots",
    "text": "Producing estimation plots\n\ntwo_groups_unpaired.mean_diff.plot();\n\n\n\n\n\ntwo_groups_unpaired.cohens_h.plot();\n\n\n\n\n\nshared_control = dabest_nbdev.load(df, idx=(\"Control 1\", \"Test 1\",\n                                \"Test 2\", \"Test 3\",\n                                \"Test 4\", \"Test 5\", \"Test 6\"),\n                    proportional=True)\nshared_control.mean_diff.plot(fig_size=(8,8));\n\n\n\n\nYou can change color of error bar by setting err_color and change width of proportional bar by bar_width\n\nshared_control.mean_diff.plot(fig_size=(8,8), err_color = \"blue\", bar_width=0.3);\n\n\n\n\nYou can change face color by setting face_color\n\nshared_control.mean_diff.plot(fig_size=(8,8),face_color=\"grey\");"
  },
  {
    "objectID": "tutorials/index.html",
    "href": "tutorials/index.html",
    "title": "Tutorials",
    "section": "",
    "text": "Click through to any of these tutorials to get started with dabest’s features.\n\n\n\n\n\n\n\n\n\n\nTitle\n\n\nDescription\n\n\n\n\n\n\nProportion Plot\n\n\nA guide to plot proportion plot with binary data\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "getting_started.html",
    "href": "getting_started.html",
    "title": "Getting Started",
    "section": "",
    "text": "pip install dabest_nbdev"
  },
  {
    "objectID": "getting_started.html#how-to-use",
    "href": "getting_started.html#how-to-use",
    "title": "Getting Started",
    "section": "How to use",
    "text": "How to use\nimport pandas as pd\nimport dabest_nbdev\n\n# Load the iris dataset. Requires internet access.\niris = pd.read_csv(\"https://github.com/mwaskom/seaborn-data/raw/master/iris.csv\")\n\n# Load the above data into `dabest`.\niris_dabest = dabest_nbdev.load(data=iris, x=\"species\", y=\"petal_width\",\n                          idx=(\"setosa\", \"versicolor\", \"virginica\"))\n\n# Produce a Cumming estimation plot.\niris_dabest.mean_diff.plot();\nPlease refer to the official tutorial for more useful code snippets."
  },
  {
    "objectID": "API/plotter.html",
    "href": "API/plotter.html",
    "title": "Plot",
    "section": "",
    "text": "source\n\nEffectSizeDataFramePlotter\n\n EffectSizeDataFramePlotter (EffectSizeDataFrame, **plot_kwargs)\n\nCustom function that creates an estimation plot from an EffectSizeDataFrame. Keywords ——– EffectSizeDataFrame: A dabest EffectSizeDataFrame object. **plot_kwargs: color_col=None raw_marker_size=6, es_marker_size=9, swarm_label=None, contrast_label=None, delta2_label=None, swarm_ylim=None, contrast_ylim=None, delta2_ylim=None, custom_palette=None, swarm_desat=0.5, halfviolin_desat=1, halfviolin_alpha=0.8, face_color = None, bar_label=None, bar_desat=0.8, bar_width = 0.5,bar_ylim = None, ci=None, err_color=None, float_contrast=True, show_pairs=True, show_delta2=True, group_summaries=None, group_summaries_offset=0.1, fig_size=None, dpi=100, ax=None, swarmplot_kwargs=None, violinplot_kwargs=None, slopegraph_kwargs=None, reflines_kwargs=None, group_summary_kwargs=None, legend_kwargs=None,"
  },
  {
    "objectID": "API/class.html",
    "href": "API/class.html",
    "title": "Class",
    "section": "",
    "text": "TwoGroupsEffectSize\n\n TwoGroupsEffectSize (control, test, effect_size, proportional,\n                      is_paired=None, ci=95, resamples=5000,\n                      permutation_count=5000, random_seed=12345)\n\nA class to compute and store the results of bootstrapped mean differences between two groups.\n\n\n\nMiniMetaDelta\n\n MiniMetaDelta (effectsizedataframe, permutation_count, ci=95)\n\nA class to compute and store the weighted mean differences.\n\n\n\nDeltaDelta\n\n DeltaDelta (effectsizedataframe, permutation_count, ci=95)\n\nA class to compute and store the delta-delta statistics.\n\n\n\nDabest\n\n Dabest (data, idx, x, y, paired, id_col, ci, resamples, random_seed,\n         proportional, delta2, experiment, experiment_label, x1_level,\n         mini_meta)\n\nClass for estimation statistics and plots.\n/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/fastcore/docscrape.py:225: UserWarning: Unknown section Notes\n  else: warn(msg)\n/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/fastcore/docscrape.py:225: UserWarning: Unknown section Example\n  else: warn(msg)\n\n\n\nPermutationTest\n\n PermutationTest (control, test, effect_size, is_paired,\n                  permutation_count=5000, random_seed=12345, **kwargs)\n\nA class to compute and report permutation tests.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ncontrol\narray-like\n\n\n\n\ntest\narray-like\n\nThese should be numerical iterables.\n\n\neffect_size\nstring.\n\nAny one of the following are accepted inputs:‘mean_diff’, ‘median_diff’, ‘cohens_d’, ‘hedges_g’, or ‘cliffs_delta’\n\n\nis_paired\nstring, default None\n\n\n\n\npermutation_count\nint\n5000\nThe number of permutations (reshuffles) to perform.\n\n\nrandom_seed\nint\n12345\nrandom_seed is used to seed the random number generator duringbootstrap resampling. This ensures that the generated permutationsare replicable.\n\n\nkwargs\n\n\n\n\n\nReturns\npy:class:PermutationTest object.\n\n\n\n\n\n\n\n\nEffectSizeDataFrame\n\n EffectSizeDataFrame (dabest, effect_size, is_paired, ci=95,\n                      proportional=False, resamples=5000,\n                      permutation_count=5000, random_seed=12345,\n                      x1_level=None, x2=None, delta2=False,\n                      experiment_label=None, mini_meta=False)\n\nA class that generates and stores the results of bootstrapped effect sizes for several comparisons."
  },
  {
    "objectID": "API/confint_1group.html",
    "href": "API/confint_1group.html",
    "title": "confint_1group",
    "section": "",
    "text": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/fastcore/docscrape.py:225: UserWarning: Unknown section Keywords\n  else: warn(msg)\n\nsource\n\nsummary_ci_1group\n\n summary_ci_1group (x, func, resamples=5000, alpha=0.05,\n                    random_seed=12345, sort_bootstraps=True, *args,\n                    **kwargs)\n\nGiven an array-like x, returns func(x), and a bootstrap confidence interval of func(x).\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nx\n\n\n\n\n\nfunc\n\n\n\n\n\nresamples\nint\n5000\n\n\n\nalpha\nfloat\n0.05\n\n\n\nrandom_seed\nint\n12345\n\n\n\nsort_bootstraps\nbool\nTrue\n\n\n\nargs\n\n\n\n\n\nkwargs\n\n\n\n\n\nReturns\nA dictionary with the following five keys:\n\n‘summary’: float. The outcome of func(x).‘func’: function. The function applied to x.‘bca_ci_low’: float‘bca_ci_high’: float. The bias-corrected and accelerated confidence interval, for the given alpha.‘bootstraps’: array. The bootstraps used to generate the confidence interval. These will be sorted in ascending order if sort_bootstraps was True.\n\n\n\n\nsource\n\n\ncompute_1group_bias_correction\n\n compute_1group_bias_correction (x, bootstraps, func, *args, **kwargs)\n\n\nsource\n\n\ncompute_1group_bootstraps\n\n compute_1group_bootstraps (x, func, resamples=5000, random_seed=12345,\n                            *args, **kwargs)\n\nBootstraps func(x), with the number of specified resamples.\n\nsource\n\n\ncompute_1group_acceleration\n\n compute_1group_acceleration (jack_dist)\n\n\nsource\n\n\ncompute_1group_jackknife\n\n compute_1group_jackknife (x, func, *args, **kwargs)\n\nReturns the jackknife bootstraps for func(x).\n\nsource\n\n\ncreate_bootstrap_indexes\n\n create_bootstrap_indexes (array, resamples=5000, random_seed=12345)\n\nGiven an array-like, returns a generator of bootstrap indexes to be used for resampling."
  },
  {
    "objectID": "API/bootstrap.html",
    "href": "API/bootstrap.html",
    "title": "Bootstrap",
    "section": "",
    "text": "bootstrap\n\n bootstrap (x1, x2=None, paired=False, statfunction=None,\n            smoothboot=False, alpha_level=0.05, reps=5000)\n\nComputes the summary statistic and a bootstrapped confidence interval.\nKeywords: x1, x2: array-like The data in a one-dimensional array form. Only x1 is required. If x2 is given, the bootstrapped summary difference between the two groups (x2-x1) is computed. NaNs are automatically discarded.\npaired: boolean, default False\n    Whether or not x1 and x2 are paired samples.\n\nstatfunction: callable, default np.mean\n    The summary statistic called on data.\n\nsmoothboot: boolean, default False\n    Taken from seaborn.algorithms.bootstrap.\n    If True, performs a smoothed bootstrap (draws samples from a kernel\n    destiny estimate).\n\nalpha: float, default 0.05\n    Denotes the likelihood that the confidence interval produced\n    does not include the true summary statistic. When alpha = 0.05,\n    a 95% confidence interval is produced.\n\nreps: int, default 5000\n    Number of bootstrap iterations to perform.\nReturns: An bootstrap object reporting the summary statistics, percentile CIs, bias-corrected and accelerated (BCa) CIs, and the settings used.\nsummary: float\n    The summary statistic.\n\nis_difference: boolean\n    Whether or not the summary is the difference between two groups.\n    If False, only x1 was supplied.\n\nis_paired: boolean\n    Whether or not the difference reported is between 2 paired groups.\n\nstatistic: callable\n    The function used to compute the summary.\n\nreps: int\n    The number of bootstrap iterations performed.\n\nstat_array: array.\n    A sorted array of values obtained by bootstrapping the input arrays.\n\nci: float\n    The size of the confidence interval reported (in percentage).\n\npct_ci_low, pct_ci_high: floats\n    The upper and lower bounds of the confidence interval as computed\n    by taking the percentage bounds.\n\npct_low_high_indices: array\n    An array with the indices in `stat_array` corresponding to the\n    percentage confidence interval bounds.\n\nbca_ci_low, bca_ci_high: floats\n    The upper and lower bounds of the bias-corrected and accelerated\n    (BCa) confidence interval. See Efron 1977.\n\nbca_low_high_indices: array\n    An array with the indices in `stat_array` corresponding to the BCa\n    confidence interval bounds.\n\npvalue_1samp_ttest: float\n    P-value obtained from scipy.stats.ttest_1samp. If 2 arrays were\n    passed (x1 and x2), returns 'NIL'.\n    See https://docs.scipy.org/doc/scipy-1.0.0/reference/generated/scipy.stats.ttest_1samp.html\n\npvalue_2samp_ind_ttest: float\n    P-value obtained from scipy.stats.ttest_ind.\n    If a single array was given (x1 only), or if `paired` is True,\n    returns 'NIL'.\n    See https://docs.scipy.org/doc/scipy-1.0.0/reference/generated/scipy.stats.ttest_ind.html\n\npvalue_2samp_related_ttest: float\n    P-value obtained from scipy.stats.ttest_rel.\n    If a single array was given (x1 only), or if `paired` is False,\n    returns 'NIL'.\n    See https://docs.scipy.org/doc/scipy-1.0.0/reference/generated/scipy.stats.ttest_rel.html\n\npvalue_wilcoxon: float\n    P-value obtained from scipy.stats.wilcoxon.\n    If a single array was given (x1 only), or if `paired` is False,\n    returns 'NIL'.\n    The Wilcoxons signed-rank test is a nonparametric paired test of\n    the null hypothesis that the related samples x1 and x2 are from\n    the same distribution.\n    See https://docs.scipy.org/doc/scipy-1.0.0/reference/scipy.stats.wilcoxon.html\n\npvalue_mann_whitney: float\n    Two-sided p-value obtained from scipy.stats.mannwhitneyu.\n    If a single array was given (x1 only), returns 'NIL'.\n    The Mann-Whitney U-test is a nonparametric unpaired test of the null\n    hypothesis that x1 and x2 are from the same distribution.\n    See https://docs.scipy.org/doc/scipy-1.0.0/reference/generated/scipy.stats.mannwhitneyu.html\n\n\n\nbca\n\n bca (data, alphas, statarray, statfunction, ostat, reps)\n\nSubroutine called to calculate the BCa statistics. Borrowed heavily from scikits.bootstrap code.\n\n\n\njackknife_indexes\n\n jackknife_indexes (data)\n\nFrom the scikits.bootstrap package. Given an array, returns a list of arrays where each array is a set of jackknife indexes.\nFor a given set of data Y, the jackknife sample J[i] is defined as the data set Y with the ith data point deleted."
  },
  {
    "objectID": "API/confint_diff.html",
    "href": "API/confint_diff.html",
    "title": "confint_2group_diff",
    "section": "",
    "text": "source\n\ncalculate_weighted_delta\n\n calculate_weighted_delta (group_var, differences, resamples)\n\nCompute the weighted deltas.\n\nsource\n\n\ncalculate_group_var\n\n calculate_group_var (control_var, control_N, test_var, test_N)\n\n\nsource\n\n\ncompute_interval_limits\n\n compute_interval_limits (bias, acceleration, n_boots, ci=95)\n\nReturns the indexes of the interval limits for a given bootstrap.\nSupply the bias, acceleration factor, and number of bootstraps.\n/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/fastcore/docscrape.py:225: UserWarning: Unknown section Keywords\n  else: warn(msg)\n\nsource\n\n\ncompute_meandiff_bias_correction\n\n compute_meandiff_bias_correction (bootstraps, effsize)\n\nComputes the bias correction required for the BCa method of confidence interval construction.\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nbootstraps\n\n\n\n\neffsize\n\n\n\n\nReturns\nbias: numeric\nThe bias correction value for the given bootstrapsand effect size.\n\n\n\n\nsource\n\n\ncompute_bootstrapped_diff\n\n compute_bootstrapped_diff (x0, x1, is_paired, effect_size,\n                            resamples=5000, random_seed=12345)\n\nBootstraps the effect_size for 2 groups.\n\nsource\n\n\ncompute_meandiff_jackknife\n\n compute_meandiff_jackknife (x0, x1, is_paired, effect_size)\n\nGiven two arrays, returns the jackknife for their effect size.\n\nsource\n\n\ncreate_repeated_indexes\n\n create_repeated_indexes (data)\n\nConvenience function. Given an array-like with length N, returns a generator that yields N indexes [0, 1, …, N].\n\nsource\n\n\ncreate_jackknife_indexes\n\n create_jackknife_indexes (data)\n\nGiven an array-like, creates a jackknife bootstrap.\nFor a given set of data Y, the jackknife bootstrap sample J[i] is defined as the data set Y with the ith data point deleted.\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\ndata\n\n\n\n\nReturns\nGenerator that yields all jackknife bootstrap samples."
  },
  {
    "objectID": "API/load.html",
    "href": "API/load.html",
    "title": "Loading Data",
    "section": "",
    "text": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/fastcore/docscrape.py:225: UserWarning: potentially wrong underline length... \nExample \n-------- in \nLoads data in preparation for estimation statistics.\n...\n  else: warn(msg)\n/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/fastcore/docscrape.py:225: UserWarning: Unknown section Example\n  else: warn(msg)\n\nsource\n\nload\n\n load (data, idx=None, x=None, y=None, paired=None, id_col=None, ci=95,\n       resamples=5000, random_seed=12345, proportional=False,\n       delta2=False, experiment=None, experiment_label=None,\n       x1_level=None, mini_meta=False)\n\nLoads data in preparation for estimation statistics.\nThis is designed to work with pandas DataFrames.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ndata\npandas DataFrame\n\n\n\n\nidx\nNoneType\nNone\nList of column names (if ‘x’ is not supplied) or of category names(if ‘x’ is supplied). This can be expressed as a tuple of tuples,with each individual tuple producing its own contrast plot\n\n\nx\nNoneType\nNone\nColumn name(s) of the independent variable. This can be expressed asa list of 2 elements if and only if ‘delta2’ is True; otherwise it can only be a string.\n\n\ny\nNoneType\nNone\nColumn names for data to be plotted on the x-axis and y-axis.\n\n\npaired\nNoneType\nNone\nThe type of the experiment under which the data are obtained\n\n\nid_col\nNoneType\nNone\nRequired if paired is True.\n\n\nci\nint\n95\nThe confidence interval width. The default of 95 produces 95%confidence intervals.\n\n\nresamples\nint\n5000\nThe number of resamples taken to generate the bootstraps which are usedto generate the confidence intervals.\n\n\nrandom_seed\nint\n12345\nThis integer is used to seed the random number generator duringbootstrap resampling, ensuring that the confidence intervalsreported are replicable.\n\n\nproportional\nbool\nFalse\nTO INCLUDE MORE DESCRIPTION ABOUT DATA FORMAT\n\n\ndelta2\nbool\nFalse\nIndicator of delta-delta experiment\n\n\nexperiment\nNoneType\nNone\nThe name of the column of the dataframe which contains the label of experiments\n\n\nexperiment_label\nNoneType\nNone\n\n\n\nx1_level\nNoneType\nNone\nA list of String to specify the order of subplots for delta-delta plots.This can be expressed as a list of 2 elements if and only if ‘delta2’ is True; otherwise it can only be a string.\n\n\nmini_meta\nbool\nFalse\nIndicator of weighted delta calculation.\n\n\nReturns\nA Dabest object."
  },
  {
    "objectID": "API/misc_tools.html",
    "href": "API/misc_tools.html",
    "title": "misc_tools",
    "section": "",
    "text": "source\n\nget_varname\n\n get_varname (obj)\n\n\nsource\n\n\nprint_greeting\n\n print_greeting ()\n\n\nsource\n\n\nunpack_and_add\n\n unpack_and_add (l, c)\n\nConvenience function to allow me to add to an existing list without altering that list.\n\nsource\n\n\nmerge_two_dicts\n\n merge_two_dicts (x, y)\n\nGiven two dicts, merge them into a new dict as a shallow copy. Any overlapping keys in y will override the values in x.\nTaken from https://stackoverflow.com/questions/38987/ how-to-merge-two-python-dictionaries-in-a-single-expression\nParameters: x, y: dicts\nReturns: A dictionary containing a union of all keys in both original dicts."
  },
  {
    "objectID": "API/index.html",
    "href": "API/index.html",
    "title": "API",
    "section": "",
    "text": "This section contains API details for each of dabest’s python submodules. This reference documentation is mainly useful for people looking to customise or build on top of dabest, or wanting detailed information about how dabest works.\n\n\n\n\n\n\n\n\n\n\nTitle\n\n\nDescription\n\n\n\n\n\n\nLoading Data\n\n\nLoading the data and the relevant groups\n\n\n\n\nClass\n\n\nSeveral class for estimation statistics and plots.\n\n\n\n\nBootstrap\n\n\n\n\n\n\n\nPlot\n\n\nCreating estimation plots.\n\n\n\n\nplot_tools\n\n\nTool functions for estimation plot.\n\n\n\n\neffsize\n\n\n\n\n\n\n\nconfint_1group\n\n\n\n\n\n\n\nconfint_2group_diff\n\n\n\n\n\n\n\nmisc_tools\n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "API/plot_tools.html",
    "href": "API/plot_tools.html",
    "title": "plot_tools",
    "section": "",
    "text": "source\n\nproportion_error_bar\n\n proportion_error_bar (data, x, y, type='mean_sd', offset=0.2, ax=None,\n                       line_color='black', gap_width_percent=1, **kwargs)\n\nFunction to plot the standard devations for proportions as vertical errorbars. The mean is a gap defined by negative space.\nThis style is inspired by Edward Tufte’s redesign of the boxplot. See The Visual Display of Quantitative Information (1983), pp.128-130.\n\nsource\n\n\ngapped_lines\n\n gapped_lines (data, x, y, type='mean_sd', offset=0.2, ax=None,\n               line_color='black', gap_width_percent=1, **kwargs)\n\nConvenience function to plot the standard devations as vertical errorbars. The mean is a gap defined by negative space.\nThis style is inspired by Edward Tufte’s redesign of the boxplot. See The Visual Display of Quantitative Information (1983), pp.128-130.\n\nsource\n\n\nget_swarm_spans\n\n get_swarm_spans (coll)\n\nGiven a matplotlib Collection, will obtain the x and y spans for the collection. Will return None if this fails.\n\nsource\n\n\nhalfviolin\n\n halfviolin (v, half='right', fill_color='k', alpha=1, line_color='k',\n             line_width=0)"
  },
  {
    "objectID": "API/effsize.html",
    "href": "API/effsize.html",
    "title": "effsize",
    "section": "",
    "text": "source"
  },
  {
    "objectID": "API/effsize.html#keywords",
    "href": "API/effsize.html#keywords",
    "title": "effsize",
    "section": "Keywords:",
    "text": "Keywords:\ncontrol, test: List, tuple, or array.\n    NaNs are automatically discarded.\n\nfunc: summary function to apply.\n\nis_paired: boolean.\n    If True, computes func(test - control).\n    If False, computes func(test) - func(control).\n\nsource\n\ntwo_group_difference\n\n two_group_difference (control, test, is_paired=False,\n                       effect_size='mean_diff')\n\nComputes the following metrics for control and test: - Unstandardized mean difference - Standardized mean differences (paired or unpaired) * Cohen’s d * Hedges’ g - Median difference - Cliff’s Delta - Cohen’s h (distance between two proportions)\nSee the Wikipedia entry here: https://bit.ly/2LzWokf\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ncontrol\n\n\n\n\n\ntest\n\n\n\n\n\nis_paired\nbool\nFalse\n\n\n\neffect_size\nstr\nmean_diff\n\n\n\nReturns\nfloat: The desired effect size."
  }
]